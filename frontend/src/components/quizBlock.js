import React, { useState, useEffect } from 'react';
import '../styles/quizBlock.css';

const QuizBlock = ({ difficulty = 1, onSuccess, onFailure, playSound }) => {
    const [selectedOption, setSelectedOption] = useState(null);
    const [verified, setVerified] = useState(null);
    const [currentQuestion, setCurrentQuestion] = useState(null);
    
    // B·ªô c√¢u h·ªèi H·∫πn H√≤ App - H√†i H∆∞·ªõc v√† Relatable
    const datingAppQuestions = React.useMemo(() => [
        {
            question: "Khi ai ƒë√≥ vi·∫øt: \"I'm an adventurous person\" tr√™n Tinder - Th·ª±c t·∫ø h·ªç l√†?",
            options: [
                "T·ª´ng leo 5 ng·ªçn n√∫i kh√≥ nh·∫•t th·∫ø gi·ªõi",
                "ƒê√£ ƒëi du l·ªãch 1 l·∫ßn trong 5 nƒÉm qua",
                "Th√≠ch th·ª≠ qu√°n ƒÉn m·ªõi g·∫ßn nh√†",
                "V·ª´a ho√†n th√†nh v√≤ng quanh th·∫ø gi·ªõi"
            ],
            correctAnswer: 1
        },
        {
            question: "Bio Bumble: \"Entrepreneur & CEO of my own business\" - Th·ª±c ch·∫•t c√¥ng vi·ªác l√†?",
            options: [
                "Ch·ªß t·ªãch t·∫≠p ƒëo√†n l·ªõn",
                "B√°n h√†ng online tr√™n Shopee/Lazada",
                "Gi√°m ƒë·ªëc ƒëi·ªÅu h√†nh startup unicorn",
                "Ch·ªß s·ªü h·ªØu chu·ªói c·ª≠a h√†ng to√†n qu·ªëc"
            ],
            correctAnswer: 1
        },
        {
            question: "Match n√≥i: \"Looking for someone serious\" - Ng∆∞·ªùi n√†y v·ª´a?",
            options: [
                "ƒê·ªãnh h√¥n v√†o th√°ng t·ªõi",
                "Chia tay h√¥m qua, mu·ªën qu√™n b·∫±ng c√°ch h·∫πn h√≤",
                "ƒê·ªôc th√¢n 10 nƒÉm v√† th·ª±c s·ª± mu·ªën ·ªïn ƒë·ªãnh",
                "K·∫øt h√¥n ƒë∆∞·ª£c 2 nƒÉm r·ªìi"
            ],
            correctAnswer: 1
        },
        {
            question: "Profile pic l√† ·∫£nh h√≥a trang th√†nh si√™u nh√¢n/ho√†ng t·ª≠ Disney - Ng∆∞·ªùi n√†y mu·ªën g·ª≠i th√¥ng ƒëi·ªáp?",
            options: [
                "T√¥i y√™u th√≠ch h√≥a trang v√† di·ªÖn k·ªãch",
                "ƒê·ª´ng mong th·∫•y m·∫∑t th·∫≠t t√¥i, b·∫°n ƒëang ch·ªçn nh√¢n v·∫≠t phim",
                "T√¥i c√≥ t√†i nƒÉng ngh·ªá thu·∫≠t r·∫•t cao",
                "T√¥i th√≠ch cosplay v√† nh·ªØng th·ª© k·ª≥ qu·∫∑c"
            ],
            correctAnswer: 1
        },
        {
            question: "Ng∆∞·ªùi vi·∫øt: \"I'm very deep and philosophical\" tr√™n app h·∫πn h√≤ - Th·ª±c t·∫ø h·ªç?",
            options: [
                "L√† gi√°o s∆∞ tri·∫øt h·ªçc t·∫°i ƒë·∫°i h·ªçc",
                "Xem meme c·∫£ ng√†y v√† g·ªçi ƒë√≥ l√† 'deep content'",
                "ƒê√£ ƒë·ªçc h·∫øt 50 cu·ªën s√°ch t√¢m l√Ω n·∫∑ng",
                "Th√≠ch th·∫£o lu·∫≠n ch√≠nh tr·ªã qu·ªëc t·∫ø"
            ],
            correctAnswer: 1
        },
        {
            question: "Bio n√≥i: \"Fluent in sarcasm\" - Ng∆∞·ªùi n√†y mu·ªën c·∫£nh b√°o?",
            options: [
                "T√¥i bi·∫øt n√≥i sarcasm ti·∫øng Anh r·∫•t gi·ªèi",
                "T√¥i l√† k·∫ª kh√≥ t√≠nh, n·∫øu kh√¥ng ch·ªãu ƒë∆∞·ª£c th√¨ ƒë·ª´ng chat v·ªõi t√¥i",
                "T√¥i r·∫•t vui v·∫ª, h√†i h∆∞·ªõc v√† y√™u ƒë√πa c·ª£t",
                "T√¥i l√† gi√°o vi√™n ti·∫øng Anh chuy√™n d·∫°y sarcasm"
            ],
            correctAnswer: 1
        },
        {
            question: "B·∫°n match m·ªõi g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n: \"Hey\" - √ù ƒë·ªãnh th·∫≠t c·ªßa h·ªç l√†?",
            options: [
                "Ch·ªâ n√≥i chuy·ªán ng·∫Øn g·ªçn v√¨ ƒëang b·∫≠n",
                "Copy template g·ª≠i cho 50 ng∆∞·ªùi c√πng l√∫c, xem ai tr·∫£ l·ªùi",
                "Mu·ªën xem b·∫°n s·∫Ω n√≥i g√¨ v√† c√≥ vui kh√¥ng",
                "ƒêang ki·ªÉm tra xem app c√≥ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng kh√¥ng"
            ],
            correctAnswer: 1
        },
        {
            question: "Nam gi·ªõi vi·∫øt \"6 feet tall\" (185cm) - Chi·ªÅu cao th·ª±c t·∫ø l√†?",
            options: [
                "ƒê√∫ng 185cm nh∆∞ ƒë√∫ng tr√™n app",
                "Kho·∫£ng 175cm, c·ªông th√™m chi·ªÅu cao t·ª´ gi√†y Timberland",
                "182cm, ƒë∆∞·ª£c ƒëo l√∫c v·ª´a th·ª©c d·∫≠y s√°ng",
                "Ch∆∞a t·ª´ng ƒë∆∞·ª£c ƒëo th·ª±c t·∫ø, ch·ªâ ƒëo√°n"
            ],
            correctAnswer: 1
        },
        {
            question: "Ng∆∞·ªùi v·ª´a t·ª´ ch·ªëi match, 2 th√°ng sau g·ª≠i: \"Hey, b·∫°n kh·ªèe kh√¥ng?\" - L√Ω do l√†?",
            options: [
                "Qu·∫£ th·ª±c mu·ªën l√†m quen l·∫°i sau 2 th√°ng suy nghƒ©",
                "V·ª´a b·ªã b·∫°n trai/g√°i tr√≤n n√™n ƒëang t√¨m ng∆∞·ªùi backup",
                "B·∫°n ƒë√≥ ch∆∞a tr·∫£ l·ªùi ai 2 th√°ng n√™n th·ª≠ l·∫°i",
                "Bu·ªìn ch√°n n√™n g·ª≠i l·∫°i cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi"
            ],
            correctAnswer: 1
        },
        {
            question: "Bio vi·∫øt: \"No drama, looking for real connection\" - S·ª± th·∫≠t l√†?",
            options: [
                "Ng∆∞·ªùi n√†y th·ª±c s·ª± ƒë√£ qua tr·∫£i v√† mu·ªën t√¨m ng∆∞·ªùi y√™n tƒ©nh",
                "V·ª´a v·ª° m·ªông v√¨ m·ªëi t√¨nh 'c√≥ drama', s·∫Ω t√¨m drama l·∫°i trong 2 tu·∫ßn",
                "L√† ng∆∞·ªùi r·∫•t b√¨nh tƒ©nh, ch∆∞a bao gi·ªù g√¢y xung ƒë·ªôt",
                "T·ª´ng l√† t√†i t·ª≠/n·ªØ di·ªÖn vi√™n c√≥ scandal"
            ],
            correctAnswer: 1
        }
    ], []);
    
    // Ch·ªçn c√¢u h·ªèi ng·∫´u nhi√™n
    useEffect(() => {
        const randomIndex = Math.floor(Math.random() * datingAppQuestions.length);
        setCurrentQuestion(datingAppQuestions[randomIndex]);
        setSelectedOption(null);
        setVerified(null);
    }, [datingAppQuestions]);
    
    // Th√™m class khi x√°c nh·∫≠n th√†nh c√¥ng
    useEffect(() => {
        if (verified === true) {
            const block = document.querySelector('.quiz-block');
            if (block) {
                block.classList.add('verified-success');
            }
        }
    }, [verified]);
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ch·ªçn ƒë√°p √°n
    const handleOptionSelect = (optionIndex) => {
        if (verified !== null) return;
        
        setSelectedOption(optionIndex);
        playSound('click');
        
        // Ki·ªÉm tra ƒë√°p √°n sau m·ªôt ch√∫t delay ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y option ƒë∆∞·ª£c ch·ªçn
        setTimeout(() => {
            const isCorrect = optionIndex === currentQuestion.correctAnswer;
            setVerified(isCorrect);
            
            if (isCorrect) {
                playSound('success');
                setTimeout(() => {
                    onSuccess();
                }, 1000); // Gi·∫£m t·ª´ 1500ms xu·ªëng 1000ms ƒë·ªÉ m∆∞·ª£t h∆°n
            } else {
                playSound('error');
                setTimeout(() => {
                    onFailure();
                }, 1200); // Gi·∫£m t·ª´ 2000ms xu·ªëng 1200ms
            }
        }, 200);
    };
    
    // N·∫øu ch∆∞a c√≥ c√¢u h·ªèi, hi·ªÉn th·ªã loading
    if (!currentQuestion) {
        return (
            <div className="quiz-block">
                <div className="quiz-header">
                    <div className="quiz-title">üî• H·∫πn H√≤ App Th·∫≠t T·∫ø üíï</div>
                    <div className="quiz-subtitle">ƒêang t·∫£i c√¢u h·ªèi...</div>
                </div>
                <div className="quiz-content loading">
                    <div className="loading-spinner"></div>
                </div>
            </div>
        );
    }
    
    return (
        <div className={`quiz-block ${verified !== null ? (verified ? 'verified-success' : 'verified-failed') : ''}`}>
            <div className="quiz-header">
                <div className="quiz-title">üî• H·∫πn H√≤ App Th·∫≠t T·∫ø üíï</div>
                <div className="quiz-subtitle">B·∫°n hi·ªÉu r√µ v·ªÅ th·∫ø gi·ªõi Tinder, Bumble, Hinge kh√¥ng?</div>
            </div>
            
            <div className="quiz-content">
                <div className="quiz-question">{currentQuestion.question}</div>
                
                <div className="quiz-options">
                    {currentQuestion.options.map((option, index) => (
                        <div 
                            key={index}
                            className={`quiz-option ${selectedOption === index ? 'selected' : ''} 
                                      ${verified !== null && index === currentQuestion.correctAnswer ? 'correct' : ''}
                                      ${verified === false && selectedOption === index ? 'incorrect' : ''}`}
                            onClick={() => handleOptionSelect(index)}
                        >
                            <div className="option-checkbox">
                                {selectedOption === index && <div className="option-checkbox-inner"></div>}
                            </div>
                            <div className="option-text">{option}</div>
                        </div>
                    ))}
                </div>
                
                {verified !== null && (
                    <div className={`quiz-feedback ${verified ? 'success' : 'error'}`}>
                        {verified 
                            ? '‚úì Ch√≠nh x√°c! B·∫°n l√† chuy√™n gia Tinder/Bumble! üòé B·∫°n n√™n vi·∫øt cu·ªën s√°ch v·ªÅ ƒëi·ªÅu n√†y.' 
                            : `‚úó Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: "${currentQuestion.options[currentQuestion.correctAnswer]}"`
                        }
                    </div>
                )}
            </div>
        </div>
    );
};

export default QuizBlock;
